@page "/"
@inject FilterContainer FilterContainer;
@implements IDisposable

<Filter />
@if (_showingExampleProjectModal)
{
    <AddNewProduct ParentMethodToCallOnClickCLose="()=> _showingExampleProjectModal=false" OnSave="@OnNewProductAdded" />
}
<div class="container-fluid align-content-center mb-2">
    <button type="button" @onclick="@(async ()=>await OpenNewProduct())" class="input-group-text btn btn-success   w-100">Add New</button>
</div>
@if (FilterContainer.Products != null)
{
    <div class="container-fluid table-responsive">
        <table class="table table-hover  table-striped   ">
            <thead class="table-dark">
                <tr>
                    <th scope="col">ProductName</th>
                    <th scope="col">ProductCode</th>
                    <th scope="col">Description</th>
                    <th scope="col">Category</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in FilterContainer.Products)
                {
                    <tr>
                        <td>@item.ProductName</td>
                        <td>@item.ProductCode</td>
                        <td>@item.Description</td>
                        <td>@item.Category?.CategoryName</td>
                    </tr>

                }
            </tbody>
        </table>
    </div>
}

@code
{
    private bool _showingExampleProjectModal = false;

    protected override async Task OnInitializedAsync()
    {
        FilterContainer.OnChange += StateHasChanged;
        await FilterContainer.LoadData();
    }

    public void Dispose()
    {
        FilterContainer.OnChange -= StateHasChanged;
    }
    private async Task OpenNewProduct()
    {
        _showingExampleProjectModal = true;

    }
    private async Task OnNewProductAdded()
    {
        _showingExampleProjectModal = false;
        await FilterContainer.LoadData();
    }
}